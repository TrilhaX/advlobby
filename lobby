warn('[TEMPEST HUB] Loading Ui')
wait(1)
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
    
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({

    Title = 'Tempest Hub | Anime Adventures',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library:Notify('Loading Anime Adventures Script', 5)

warn('[TEMPEST HUB] Loading Functions')
wait(1)

function deleteinfplayer()
    while getgenv().deleteinfplayer do
        local player = game.Players.LocalPlayer
        if not player then
            return
        end

        local head = player.Character and player.Character:FindFirstChild("Head")
        if not head then
            return
        end

        local overhead = head:FindFirstChild("_overhead")
        if not overhead then
            return
        end

        local frame = overhead:FindFirstChild("Frame")
        if not frame then
            return
        end

        frame:Destroy()
        
        wait(0.1) -- Adiciona um pequeno atraso entre as exclusões para evitar bloqueios
    end
end


function deletemap()
    while getgenv().deletemap == true do
        local map = workspace:FindFirstChild("_map")
        local bases = workspace:FindFirstChild("_BASES")
        local waterBlocks = workspace:FindFirstChild("_water_blocks")

        if map then
            map:Destroy()
        end

        if bases then
            bases:Destroy()
        end

        if waterBlocks then
            waterBlocks:Destroy()
        end

        wait(1) -- Adicionando um pequeno atraso para evitar um loop infinito intenso
    end
end

local function autostart()
    while getgenv().autostart == true do
        game:GetService("ReplicatedStorage").endpoints.client_to_server.vote_start:InvokeServer()
    end
end

 local function autoskipwave()
    while getgenv().autoskipwave == true do
        game:GetService("ReplicatedStorage").endpoints.client_to_server.vote_wave_skip:InvokeServer()
    end
end

function autoreplay()
    while getgenv().autoreplay == true do
        local args = {
            [1] = "replay"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("endpoints"):WaitForChild("client_to_server"):WaitForChild("set_game_finished_vote"):InvokeServer(unpack(args))        
    end
end

function autonext()
    while toggle do
        local args = {
            [1] = "next_story"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(unpack(args))        
    end
end

function autoleave()
    while toggle do
        local ohString1 = "leave"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1)
    end
end

function autoredeemcodes()
    local codes = {"OVERLORD", "NEWCODE0819", "SUMMER2023"}
    
    -- Itera sobre a tabela de códigos
    for _, v in pairs(codes) do
        pcall(function()
            -- Invoca o servidor com o código atual
            game:GetService("ReplicatedStorage").endpoints["client_to_server"]["redeem_code"]:InvokeServer(v)
        end)
    end
end

function dgCP()
    while getgenv().dgCP == true do
        local ohString1 = "_lobbytemplate_event22"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)
        local ohString2 = "_lobbytemplategreen22"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString2)
    end
end

function dgCW()
    while getgenv().dgCW == true do
        local args = {
            [1] = "Items",
            [2] = 0
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(unpack(args))
        local args = {
            [1] = "_lobbytemplate_event222",
            [2] = {
                ["selected_key"] = "key_jjk_finger"
            }
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))                
    end
end

function autoSummon()
    while getgenv().autoSummon == true do
        local ohString1 = "EventClover"
        local ohString2 = "gems10"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(ohString1, ohString2)
    end
end


function autoSummon1()
    while getgenv().autoSummon1 == true do
        local ohString1 = "EventClover"
        local ohString2 = "gems"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(ohString1, ohString2)
    end
end

function autosummonTicket()
    while getgenv().autosummonTicket == true do
        local ohString1 = "EventClover"
        local ohString2 = "ticket"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(ohString1, ohString2)
    end
end


function autobuycapsuleSummer1()
    while getgenv().autobuycapsuleSummer1 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = "event",
            [3] = "event_shop",
            [4] = "1"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_item_generic:InvokeServer(unpack(args))
    end
end

function autobuycapsuleSummer10()
    while getgenv().autobuycapsuleSummer10 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = "event",
            [3] = "event_shop",
            [4] = "10"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_item_generic:InvokeServer(unpack(args))
    end
end

function autobuycapsuleSummer100()
    while getgenv().autobuycapsuleSummer100 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = "event",
            [3] = "event_shop",
            [4] = "100"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_item_generic:InvokeServer(unpack(args))
    end
end


function autoopencapsuleSummer1()
    while getgenv().autoopencapsuleSummer1 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = {
                ["use10"] = false
            }
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_item:InvokeServer(unpack(args))        
    end
end

function autoopencapsuleSummer10()
    while getgenv().autoopencapsuleSummer10 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = {
                ["use10"] = true
            }
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_item:InvokeServer(unpack(args))                         
    end
end

local function autoquestoverlord()
    while getgenv().autoquestoverlord == true do
        wait(1)
        local args = {
            [1] = "overlord_daily"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.accept_npc_quest:InvokeServer(unpack(args))
    end
end

function autoDchallenge()
    while getgenv().autoDchallenge == true do
        local args = {
            [1] = "_lobbytemplate321"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))    
    end
end

function pickportalsummer()
    while getgenv().pickportalsummer == true do
        wait(1)
 local portalSummer = game:GetService("ReplicatedStorage")._FX_CACHE.portal_summer
 local valor = portalSummer._uuid_or_id.Value
 
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 wait(1)
 -- Defina a string ohString1
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a função com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 wait(1)
 end
 end

 function pickportaleclipse()
    while getgenv().pickportaleclipse == true do
        wait(1)
 local portal_item__eclipse = game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__eclipse
 local valor = portal_item__eclipse._uuid_or_id.Value
 
 local ohString1 = "Items"
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 -- Defina a string ohString1
 wait(1)
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a função com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 wait(1)
 end
 end

 function pickportalfate()
    while getgenv().pickportalfate == true do
        wait(1)
        
        -- Obtenha o valor de 'valor' de forma mais segura
        local valor = game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__fate and game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__fate._uuid_or_id and game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__fate._uuid_or_id.Value
        
        if valor then
            local args1 = {
                [1] = "Items",
                [2] = 0
            }
            
            -- Chame a função com os valores atualizados
            game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(unpack(args1))
            
            wait(1)
            
            local ohString1 = "replay"
            local ohTable2 = {
                ["item_uuid"] = valor
            }
            
            -- Chame a função com os valores atualizados
            game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
            
            wait(1)
        end
    end
end

 function pickportalsds()
    while getgenv().pickportalsds == true do
        wait(1)
 local portal_zeldris = game:GetService("ReplicatedStorage")._FX_CACHE.portal_zeldris
 local valor = portal_zeldris._uuid_or_id.Value
 
 local ohString1 = "Items"
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 wait(1)
 -- Defina a string ohString1
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a função com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 wait(1)
 end
 end
 


 function pickportaldressrosa()
    while getgenv().pickportaldressrosa == true do
        wait(1)
 local portal_item__dressrosa = game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__dressrosa
 local valor = portal_item__dressrosa._uuid_or_id.Value
 
 local ohString1 = "Items"
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 wait(1)
 -- Defina a string ohString1
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a função com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 wait(1)
 end
 end

 function tptolobby()
    game:GetService("TeleportService"):Teleport(8304191830, LocalPlayer) 
 end

 function autogetdailylogin()
    while getgenv().autogetdailylogin == true do
        wait()
        game:GetService("ReplicatedStorage").endpoints.client_to_server.claim_daily_reward:InvokeServer()
    end
end

function teleportPlayers()
    local players = game:GetService("Players")

    -- Verifique se há pelo menos dois jogadores
    if #players:GetPlayers() >= 2 then
        -- Teleportar o primeiro jogador
        local player1 = players:GetPlayers()[1]
        local targetPlaceId = 8304191830  -- O placeId que você deseja bloquear

        -- Verifique se o lugar atual é o lugar que você deseja bloquear
        if game.PlaceId ~= targetPlaceId then
            game:GetService("TeleportService"):Teleport(targetPlaceId, player1)
        end
    end
end

function autochallengegold()
    while getgenv().autochallengegold == true do
        wait(1)
        local Challenges = game:GetService("Workspace")["_CHALLENGES"].Challenges
        local Challenge = Challenges["_lobbytemplate320"]
        
        if Challenge then
            local valor = Challenge.Reward.Value
            if valor == "gold" then
                local args = {
                    [1] = "_lobbytemplate320"
                }
                
                game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
            end
        end
    end
end

function autochallengeRainbow()
    while getgenv().autochallengeRainbow == true do
        wait(1)
        local Challenges = game:GetService("Workspace")["_CHALLENGES"].Challenges
        local Challenge = Challenges["_lobbytemplate320"]
        
        if Challenge then
            local valor = Challenge.Reward.Value
            if valor == "star_fruit_epic" then
                local args = {
                    [1] = "_lobbytemplate320"
                }
                
                game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
            end
        end
    end
end

function autochallengeRandom()
    while getgenv().autochallengeRandom == true do
        wait(1)
        local Challenges = game:GetService("Workspace")["_CHALLENGES"].Challenges
        local Challenge = Challenges["_lobbytemplate320"]
        
        if Challenge then
            local valor = Challenge.Reward.Value
            if valor == "star_fruit_random" then
                local args = {
                    [1] = "_lobbytemplate320"
                }
                
                game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
            end
        end
    end
end

function autochallengegems()
    while getgenv().autochallengegems == true do
        wait(1)
        local Challenges = game:GetService("Workspace")["_CHALLENGES"].Challenges
        local Challenge = Challenges["_lobbytemplate320"]
        
        if Challenge then
            local valor = Challenge.Reward.Value
            if valor == "gems" then
                local args = {
                    [1] = "_lobbytemplate320"
                }
                
                game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
            end
        end
    end
end


-- Tabela que mapeia o nome do raid para seu nível correspondente
local raidLevels = {
    ['Entertainment District (Stage 1)'] = 'entertainment_district_level_1',
    ['Entertainment District (Stage 2)'] = 'entertainment_district_level_2',
    ['Entertainment District (Stage 3)'] = 'entertainment_district_level_3',
    ['Entertainment District (Stage 4)'] = 'entertainment_district_level_4',
    ['Entertainment District (Stage 5)'] = 'entertainment_district_level_5',
    ['Uchiha (Stage 1)'] = 'uchiha_level_1',
    ['Uchiha (Stage 2)'] = 'uchiha_level_2',
    ['Uchiha (Stage 3)'] = 'uchiha_level_3',
    ['Uchiha (Stage 4)'] = 'uchiha_level_4',
    ['Uchiha (Stage 5)'] = 'uchiha_level_5',
    ['West City Freeza  (Stage 1)'] = 'west_city_frieza_level_1',
    ['West City Freeza  (Stage 2)'] = 'west_city_frieza_level_2',
    ['West City Freeza  (Stage 3)'] = 'west_city_frieza_level_3',
    ['West City Freeza  (Stage 4)'] = 'west_city_frieza_level_4',
    ['West City Freeza  (Stage 5)'] = 'west_city_frieza_level_5',
    ['Demon Slayer Raid'] = 'demonslayer_raid_1',
    ['Naruto Raid'] = 'naruto_raid_1',
    ['Aot Raid'] = 'aot_raid_1',
    ['West City'] = 'west_city_raid',
    ['Mha (Stain Stage)'] = 'mha_stain',
    ['Marine Ford (Sengoku Stage)'] = 'marineford_sengoku',
}

local selectRaid = "" -- Adicione uma variável global para armazenar a seleção de raid

-- Função genérica para lidar com os raids
local function handleRaid(raidName, raidLevel)
    while getgenv()[raidName] == true do
        local args = {
            [1] = "_lobbytemplate214"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
        wait()
        args = {
            [1] = "_lobbytemplate214",
            [2] = raidLevel, -- Corrigido: Use a variável raidLevel em vez de raidLevels
            [3] = false,
            [4] = "Hard"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(unpack(args))
        wait(1)
    end
end

-- Tabela que mapeia o nome do raid para seu nível correspondente
local LegendLevels = {
    ['Clover Legend (Stage 1)'] = 'clover_legend_1',
    ['Clover Legend (Stage 2)'] = 'clover_legend_2',
    ['Clover Legend (Stage 3)'] = 'clover_legend_3',
    ['Bleach Legend (Stage 1)'] = 'bleach_legend_1',
    ['Bleach Legend (Stage 2)'] = 'bleach_legend_2',
    ['Bleach Legend (Stage 3)'] = 'bleach_legend_3',
    ['Bleach Legend (Stage 4)'] = 'bleach_legend_4',
    ['Bleach Legend (Stage 5)'] = 'bleach_legend_5',
    ['Bleach Legend (Stage 6)'] = 'bleach_legend_6',
    ['Jojo Legend (Stage 1)'] = 'jojo_legend_1',
    ['Jojo Legend (Stage 2)'] = 'jojo_legend_2',
    ['Jojo Legend (Stage 3)'] = 'jojo_legend_3',
    ['7ds Legend (Stage 1)'] = '7ds_legend_1',
    ['7ds Legend (Stage 2)'] = '7ds_legend_2',
    ['7ds Legend (Stage 3)'] = '7ds_legend_3',
    ['MHA Legend (Stage 1)'] = 'mha_legend_1',
    ['MHA Legend (Stage 2)'] = 'mha_legend_2',
    ['MHA Legend (Stage 3)'] = 'mha_legend_3',
    ['MHA Legend (Stage 4)'] = 'mha_legend_4',
    ['MHA Legend (Stage 5)'] = 'mha_legend_5',
    ['MHA Legend (Stage 6)'] = 'mha_legend_6',
    ['Sao Legend (Stage 1)'] = 'sao_legend_1',
    ['Sao Legend (Stage 2)'] = 'sao_legend_2',
    ['Sao Legend (Stage 3)'] = 'sao_legend_3',
    ['Overlord Legend (Stage 1)'] = 'overlord_legend_1',
    ['Overlord Legend (Stage 2)'] = 'overlord_legend_2',
    ['Overlord Legend (Stage 3)'] = 'overlord_legend_3'
}

local selectLegend = "" -- Adicione uma variável global para armazenar a seleção de raid

-- Função genérica para lidar com os raids
local function handleRaid(legendname, legendlevel)
    while getgenv()[legendname] == true do
        local args = {
            [1] = "_lobbytemplategreen1"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
        wait()        
        args = {
            [1] = "_lobbytemplategreen1",
            [2] = legendlevel,
            [3] = false,
            [4] = "Hard"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(unpack(args))
        wait(1)
        args = {
            [1] = "_lobbytemplategreen1"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args))
    end
end

-- Function to open the Summer Portal
function autoOpenSummerPortal()
    while getgenv().autoOpenSummerPortal == true do
        local portalSummer = game:GetService("ReplicatedStorage")._FX_CACHE.portal_summer
        local valor = portalSummer._uuid_or_id.Value
        local args1 = {
            [1] = "Items",
            [2] = 0
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(unpack(args1))

        local args2 = {
            [1] = valor,
            [2] = {
                ["friends_only"] = selectFriends == 'True'  -- Check if selectFriends is 'True'
            }
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_portal:InvokeServer(unpack(args2))

        local args3 = {
            [1] = "_lobbytemplategreen214"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args3))
        break
    end
end

function autoOpenDressrosaPortal()
    while getgenv().autoOpenDressrosaPortal == true do
        local portalDressrosa = game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__dressrosa
        local valor = portalDressrosa._uuid_or_id.Value
        local args1 = {
            [1] = "Items",
            [2] = 0
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(unpack(args1))

        local args2 = {
            [1] = valor,
            [2] = {
                ["friends_only"] = selectFriends == 'True'  -- Check if selectFriends is 'True'
            }
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_portal:InvokeServer(unpack(args2))

        local args3 = {
            [1] = "_lobbytemplategreen214"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args3))
        break
    end
end

function autoOpen7dsPortal()
    while getgenv().autoOpen7dsPortal == true do
        local portalZeldris = game:GetService("ReplicatedStorage")._FX_CACHE.portal_zeldris
        local valor = portalZeldris._uuid_or_id.Value
        local args1 = {
            [1] = "Items",
            [2] = 0
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(unpack(args1))

        local args2 = {
            [1] = valor,
            [2] = {
                ["friends_only"] = selectFriends == 'True'  -- Check if selectFriends is 'True'
            }
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_portal:InvokeServer(unpack(args2))

        local args3 = {
            [1] = "_lobbytemplategreen214"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args3))
        break
    end
end

function autoOpenEclipsePortal()
    while getgenv().autoOpenEclipsePortal == true do
        local portalEclipse = game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__eclipse
        local valor = portalEclipse._uuid_or_id.Value
        local args1 = {
            [1] = "Items",
            [2] = 0
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(unpack(args1))

        local args2 = {
            [1] = valor,
            [2] = {
                ["friends_only"] = selectFriends == 'True'  -- Check if selectFriends is 'True'
            }
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_portal:InvokeServer(unpack(args2))
        

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args3))
        break
    end
end

function autoOpenFatePortal()
    while getgenv().autoOpenFatePortal == true do
        local valor = game:GetService("ReplicatedStorage")._FX_CACHE:FindFirstChild('portal_item__fate') and game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__fate:FindFirstChild('_uuid_or_id') and game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__fate._uuid_or_id.Value

        if valor then 
            local args1 = {
                [1] = "Items",
                [2] = 0
            }

            game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(unpack(args1))

            local args2 = {
                [1] = valor,
                [2] = {
                    ["friends_only"] = selectFriends == 'True'
                }
            }

            game:GetService("ReplicatedStorage").endpoints.client_to_server.use_portal:InvokeServer(unpack(args2))
            break
        end
    end
end

warn('[TEMPEST HUB] Loading Checking Toggles')
wait(1)

local Tabs = {
    -- Creates a new tab titled Main
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddToggle('Hide Name', {
    Text = 'Hide Name',
    Default = false, -- Default value (true / false)
    Tooltip = 'Hide Name', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().deleteinfplayer = Value
        deleteinfplayer()
    end
})

LeftGroupBox:AddToggle('Delete Map', {
    Text = 'Delete Map',
    Default = false, -- Default value (true / false)
    Tooltip = 'Delete Map', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().deletemap = Value
        deletemap()
    end
})

LeftGroupBox:AddToggle('Security Mode', {
    Text = 'Security Mode',
    Default = false, -- Default value (true / false)
    Tooltip = 'Security Mode', -- Informação exibida quando você passa o mouse sobre o toggle

    Callback = function(Value)
        getgenv().quittwoplayers = Value
        if Value then
            teleportPlayers()
        end
    end
})


local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Game')

LeftGroupBox:AddToggle('Auto Start', {
    Text = 'Auto Start',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Start', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autostart = Value
        autostart()
    end
})

LeftGroupBox:AddToggle('Auto Skip Wave', {
    Text = 'Auto Skip Wave',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Skip Wave', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoskipwave = Value
        autoskipwave()
    end
})

LeftGroupBox:AddToggle('Auto Replay', {
    Text = 'Auto Replay',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Replay', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoreplay = Value
        autoreplay()
    end
})

LeftGroupBox:AddToggle('Auto Leave', {
    Text = 'Auto Leave',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Leave', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoleave = Value
        autoleave()
    end
})

LeftGroupBox:AddToggle('Auto Next Story', {
    Text = 'Auto Next Story',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Next Story', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autonext = Value
        autonext()
    end
})

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Misc')

local MyButton = LeftGroupBox:AddButton({
    Text = 'Auto Redeem All Codes',
    Func = function()
        autoredeemcodes()
    end,
    DoubleClick = false,
    Tooltip = 'Auto Redeem All Codes'
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Copy Discord Link',
    Func = function()
        local linkParaCopiar = 'https://discord.gg/EsV8G2Gc'
        setclipboard(linkParaCopiar)
    end,
    DoubleClick = false,
})

local MyButton = LeftGroupBox:AddButton({
    Text = 'Tp To Lobby',
    Func = function()
        tptolobby()
    end,
    DoubleClick = false,
    Tooltip = 'tptolobby'
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('Auto Quest')

RightGroupBox:AddToggle('Auto Quest Overlord', {
    Text = 'Auto Quest Overlord',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Quest Overlord', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoquestoverlord = Value
        autoquestoverlord()
    end
})

RightGroupBox:AddToggle('Auto Get Login Rewards', {
    Text = 'Auto Get Login Rewards',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Get Login Rewards', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autogetdailylogin = Value
        autogetdailylogin()
    end
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('Summer Event')

RightGroupBox:AddToggle('Auto Open 1 Summer Capsule', {
    Text = 'Auto Open 1 Summer Capsule',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Open 1 Summer Capsule', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoopencapsuleSummer1 = Value
        autoopencapsuleSummer1()
    end
})

RightGroupBox:AddToggle('Auto Open 10 Summer Capsule', {
    Text = 'Auto Open 10 Summer Capsule',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Open 10 Summer Capsule', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoopencapsuleSummer10 = Value
        autoopencapsuleSummer10()
    end
})

RightGroupBox:AddToggle('Auto Open 100 Summer Capsule', {
    Text = 'Auto Open 100 Summer Capsule',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Open 100 Summer Capsule', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoopencapsuleSummer100 = Value
        autoopencapsuleSummer100()
    end
})

RightGroupBox:AddToggle('Auto Buy 1 Summer Capsule', {
    Text = 'Auto Buy 1 Summer Capsule',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Buy 1 Summer Capsule', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autobuycapsuleSummer1 = Value
        autobuycapsuleSummer1()
    end
})

RightGroupBox:AddToggle('Auto Buy 10 Summer Capsule', {
    Text = 'Auto Buy 10 Summer Capsule',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Buy 10 Summer Capsule', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autobuycapsuleSummer10 = Value
        autobuycapsuleSummer10()
    end
})

RightGroupBox:AddToggle('Auto Buy 100 Summer Capsule', {
    Text = 'Auto Buy 100 Summer Capsule',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Buy 100 Summer Capsule', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autobuycapsuleSummer100 = Value
        autobuycapsuleSummer100()
    end
})

function CheckErwinCount(erwin1)
    return #erwin1 == 4
end

function UseActiveAttackE()
    local goat = game.Players.LocalPlayer
    local erwin1 = {}

    while toggle do
        erwin1 = {}

        for _, v in pairs(game:GetService("Workspace")._UNITS:GetChildren()) do
            if v.Name == 'erwin' and v._stats.player.Value == goat then
                table.insert(erwin1, v)
            end
        end

        if CheckErwinCount(erwin1) then
            for i, erwin in ipairs(erwin1) do
                if not toggle then
                    break
                end

                local endpoints = game:GetService("ReplicatedStorage"):WaitForChild("endpoints")
                local client_to_server = endpoints:WaitForChild("client_to_server")
                local use_active_attack = client_to_server:WaitForChild("use_active_attack")

                use_active_attack:InvokeServer(erwin)
                wait(15.4)
            end
        end
        wait(1)
    end
end

local RightGroupBox = Tabs.Main:AddRightGroupbox('Auto Buff 100%')

RightGroupBox:AddToggle('Auto Buff Erwin', {
    Text = 'Auto Buff Erwin',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Buff Erwin', -- Information shown when you hover over the toggle

    Callback = function(Value)
        toggle = Value -- Atualize o valor da variável de alternância
        if toggle then
            UseActiveAttackE()
        end
    end,
})


-- Função para verificar o número de "wendys" em uma tabela
function CheckWendyCount(wendyTable)
return #wendyTable == 4
end

-- Função para usar um ataque ativo quando houver 4 "wendys"
function UseActiveAttackW()
local player = game.Players.LocalPlayer

while true do
    -- Aguarde até que o jogador local esteja disponível
    repeat wait(1) until player and player.Character

    -- Limpe a tabela wendy1
    local wendy1 = {}

    -- Popule a tabela wendy1 com "wendys" pertencentes ao jogador local
    for _, unit in pairs(game:GetService("Workspace")._UNITS:GetChildren()) do
        if unit.Name == 'wendy' and unit._stats.player.Value == player then
            table.insert(wendy1, unit)
        end
    end

    -- Verifique se há 4 "wendys"
    if CheckWendyCount(wendy1) then
        for _, wendyUnit in ipairs(wendy1) do
            game:GetService("ReplicatedStorage"):WaitForChild("endpoints"):WaitForChild("client_to_server"):WaitForChild("use_active_attack"):InvokeServer(wendyUnit)
            wait(15.5)
        end
    end

    -- Pause antes de verificar novamente
    wait(1)
end
end

-- Adicione uma função para iniciar o Auto Buff Wenda
local toggle = false

RightGroupBox:AddToggle('Auto Buff Wenda', {
Text = 'Auto Buff Wenda',
Default = false,
Tooltip = 'Auto Buff Wenda',

Callback = function(Value)
    toggle = Value
    if toggle then
        UseActiveAttackW()
    end
end,
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('Auto Hability')

local autogojoSkillEnabled = false

local function autogojoskill()
    while autogojoSkillEnabled do
        local gojo_evolved = workspace._UNITS:FindFirstChild("gojo_evolved")
        
        if gojo_evolved then
            local args = {
                [1] = gojo_evolved
            }
            
            local success, err = pcall(function()
                game:GetService("ReplicatedStorage").endpoints.client_to_server.use_active_attack:InvokeServer(unpack(args))
            end)
            
            if not success then
                warn("Failed to use gojo's skill: " .. tostring(err))
            end
        end
        wait(1) -- Adicione um pequeno atraso entre as iterações para evitar problemas de desempenho
    end
end

-- Verifica se o objeto "gojo_evolved" já existe no workspace
if workspace:FindFirstChild("_UNITS") and workspace._UNITS:FindFirstChild("gojo_evolved") then
    autogojoskill() -- Se o objeto já existe, comece a função imediatamente
end

-- Monitorar o spawn de Homura
workspace._UNITS.ChildAdded:Connect(function(child)
    if child.Name == "gojo_evolved" and autogojoSkillEnabled then
        autogojoskill()
    end
end)

RightGroupBox:AddToggle('Auto Skill Gojo', {
    Text = 'Auto Skill Gojo',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Skill Gojo', -- Information shown when you hover over the toggle

    Callback = function(Value)
        autogojoSkillEnabled = Value -- Atualize o valor da variável de alternância
        if Value then
            autogojoskill()
        end
    end,
})

local autoHomuraSkillEnabled = false

local function autoHomuraSkill()
    while autoHomuraSkillEnabled do
        local homura = workspace._UNITS:FindFirstChild("homura")
        
        if homura then
            local args = {
                [1] = homura
            }
            
            local success, err = pcall(function()
                game:GetService("ReplicatedStorage").endpoints.client_to_server.use_active_attack:InvokeServer(unpack(args))
            end)
            
            if not success then
                warn("Failed to use Homura's skill: " .. tostring(err))
            end
        end
        
        wait(1) -- Wait for a moment before using the skill again (you can adjust this value)
    end
end

-- Monitorar o spawn de Homura
workspace._UNITS.ChildAdded:Connect(function(child)
    if child.Name == "homura" and autoHomuraSkillEnabled then
        autoHomuraSkill()
    end
end)

RightGroupBox:AddToggle('Auto Skill Homura', {
    Text = 'Auto Skill Homura',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Skill Homura', -- Information shown when you hover over the toggle

    Callback = function(Value)
        autoHomuraSkillEnabled = Value -- Atualize o valor da variável de alternância
        if autoHomuraSkillEnabled then
            autoHomuraSkill()
        end
    end,
})

local Tabs = {
    -- Cria uma nova aba com o título "Main"
    Main = Window:AddTab('Farm'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Story')

local selectionStory = 'Namek (Stage 1)' -- Corrected the variable name
local selectionDifficulty = 'Normal' -- Added difficulty variable with a default value

local function handlestory(storyname, storylevel, difficulty) -- Added difficulty parameter
    while getgenv()[storyname] == true do
        local args = {
            [1] = "_lobbytemplategreen1"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
        args[2] = storylevel -- Updated the story level
        args[3] = false
        args[4] = difficulty -- Set the difficulty
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(unpack(args))
        wait(1)
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args))
    end
end

local storylevels = {
['Namek (Stage 1)'] = 'namek_level_1',
['Namek (Stage 2)'] = 'namek_level_2',
['Namek (Stage 3)'] = 'namek_level_3',
['Namek (Stage 4)'] = 'namek_level_4',
['Namek (Stage 5)'] = 'namek_level_5',
['Namek (Stage 6)'] = 'namek_level_6',
['Aot (Stage 1)'] = 'aot_level_1',
['Aot (Stage 2)'] = 'aot_level_2',
['Aot (Stage 3)'] = 'aot_level_3',
['Aot (Stage 4)'] = 'aot_level_4',
['Aot (Stage 5)'] = 'aot_level_5',
['Aot (Stage 6)'] = 'aot_level_6',
['Demon Slayer (Stage 1)'] = 'demonslayer_level_1',
['Demon Slayer (Stage 2)'] = 'demonslayer_level_2',
['Demon Slayer (Stage 3)'] = 'demonslayer_level_3',
['Demon Slayer (Stage 4)'] = 'demonslayer_level_4',
['Demon Slayer (Stage 5)'] = 'demonslayer_level_5',
['Demon Slayer (Stage 6)'] = 'demonslayer_level_6',
['Naruto (Stage 1)'] = 'naruto_level_1',
['Naruto (Stage 2)'] = 'naruto_level_2',
['Naruto (Stage 3)'] = 'naruto_level_3',
['Naruto (Stage 4)'] = 'naruto_level_4',
['Naruto (Stage 5)'] = 'naruto_level_5',
['Naruto (Stage 6)'] = 'naruto_level_6',
['Marine Ford (Stage 1)'] = 'marineford_level_1',
['Marine Ford (Stage 2)'] = 'marineford_level_2',
['Marine Ford (Stage 3)'] = 'marineford_level_3',
['Marine Ford (Stage 4)'] = 'marineford_level_4',
['Marine Ford (Stage 5)'] = 'marineford_level_5',
['Marine Ford (Stage 6)'] = 'marineford_level_6',
['Tokyo Ghoul (Stage 1)'] = 'tokyoghoul_level_1',
['Tokyo Ghoul (Stage 2)'] = 'tokyoghoul_level_2',
['Tokyo Ghoul (Stage 3)'] = 'tokyoghoul_level_3',
['Tokyo Ghoul (Stage 4)'] = 'tokyoghoul_level_4',
['Tokyo Ghoul (Stage 5)'] = 'tokyoghoul_level_5',
['Tokyo Ghoul (Stage 6)'] = 'tokyoghoul_level_6',
['Bleach (Stage 1)'] = 'hueco_level_1',
['Bleach (Stage 2)'] = 'hueco_level_2',
['Bleach (Stage 3)'] = 'hueco_level_3',
['Bleach (Stage 4)'] = 'hueco_level_4',
['Bleach (Stage 5)'] = 'hueco_level_5',
['Bleach (Stage 6)'] = 'hueco_level_6',
['HxH (Stage 1)'] = 'hxhant_level_1',
['HxH (Stage 2)'] = 'hxhant_level_2',
['HxH (Stage 3)'] = 'hxhant_level_3',
['HxH (Stage 4)'] = 'hxhant_level_4',
['HxH (Stage 5)'] = 'hxhant_level_5',
['HxH (Stage 6)'] = 'hxhant_level_6',
['Fairy Tail (Stage 1)'] = 'magnolia_level_1',
['Fairy Tail (Stage 2)'] = 'magnolia_level_2',
['Fairy Tail (Stage 3)'] = 'magnolia_level_3',
['Fairy Tail (Stage 4)'] = 'magnolia_level_4',
['Fairy Tail (Stage 5)'] = 'magnolia_level_5',
['Fairy Tail (Stage 6)'] = 'magnolia_level_6',
['Jujutsu Kaisen (Stage 1)'] = 'jjk_level_1',
['Jujutsu Kaisen (Stage 2)'] = 'jjk_level_2',
['Jujutsu Kaisen (Stage 3)'] = 'jjk_level_3',
['Jujutsu Kaisen (Stage 4)'] = 'jjk_level_4',
['Jujutsu Kaisen (Stage 5)'] = 'jjk_level_5',
['Jujutsu Kaisen (Stage 6)'] = 'jjk_level_6',
['Black Clover (Stage 1)'] = 'clover_level_1',
['Black Clover (Stage 2)'] = 'clover_level_2',
['Black Clover (Stage 3)'] = 'clover_level_3',
['Black Clover (Stage 4)'] = 'clover_level_4',
['Black Clover (Stage 5)'] = 'clover_level_5',
['Black Clover (Stage 6)'] = 'clover_level_6',
['Jojo (Stage 1)'] = 'jojo_level_1',
['Jojo (Stage 2)'] = 'jojo_level_2',
['Jojo (Stage 3)'] = 'jojo_level_3',
['Jojo (Stage 4)'] = 'jojo_level_4',
['Jojo (Stage 5)'] = 'jojo_level_5',
['Jojo (Stage 6)'] = 'jojo_level_6',
['OPM (Stage 1)'] = 'opm_level_1',
['OPM (Stage 2)'] = 'opm_level_2',
['OPM (Stage 3)'] = 'opm_level_3',
['OPM (Stage 4)'] = 'opm_level_4',
['OPM (Stage 5)'] = 'opm_level_5',
['OPM (Stage 6)'] = 'opm_level_6',
['7ds (Stage 1)'] = '7ds_level_1',
['7ds (Stage 2)'] = '7ds_level_2',
['7ds (Stage 3)'] = '7ds_level_3',
['7ds (Stage 4)'] = '7ds_level_4',
['7ds (Stage 5)'] = '7ds_level_5',
['7ds (Stage 6)'] = '7ds_level_6',
['MHA (Stage 1)'] = 'mha_level_1',
['MHA (Stage 2)'] = 'mha_level_2',
['MHA (Stage 3)'] = 'mha_level_3',
['MHA (Stage 4)'] = 'mha_level_4',
['MHA (Stage 5)'] = 'mha_level_5',
['MHA (Stage 6)'] = 'mha_level_6',
['One Piece (Stage 1)'] = 'dressrosa_level_1',
['One Piece (Stage 2)'] = 'dressrosa_level_2',
['One Piece (Stage 3)'] = 'dressrosa_level_3',
['One Piece (Stage 4)'] = 'dressrosa_level_4',
['One Piece (Stage 5)'] = 'dressrosa_level_5',
['One Piece (Stage 6)'] = 'dressrosa_level_6',
['SAO (Stage 1)'] = 'sao_level_1',
['SAO (Stage 2)'] = 'sao_level_2',
['SAO (Stage 3)'] = 'sao_level_3',
['SAO (Stage 4)'] = 'sao_level_4',
['SAO (Stage 5)'] = 'sao_level_5',
['SAO (Stage 6)'] = 'sao_level_6',
['Bersek (Stage 1)'] = 'berserk_level_1',
['Bersek (Stage 2)'] = 'berserk_level_2',
['Bersek (Stage 3)'] = 'berserk_level_3',
['Bersek (Stage 4)'] = 'berserk_level_4',
['Bersek (Stage 5)'] = 'berserk_level_5',
['Bersek (Stage 6)'] = 'berserk_level_6',
['Overlord (Stage 1)'] = 'overlord_level_1',
['Overlord (Stage 2)'] = 'overlord_level_2',
['Overlord (Stage 3)'] = 'overlord_level_3',
['Overlord (Stage 4)'] = 'overlord_level_4',
['Overlord (Stage 5)'] = 'overlord_level_5',
['Overlord (Stage 6)'] = 'overlord_level_6',
}

local difficulties = { -- Define the difficulties
    ['Normal'] = 'Normal',
    ['Hard'] = 'Hard',
}

-- Function to control the raids
function autostoryToggle()
    local storylevel = storylevels[selectionStory]
    local difficulty = difficulties[selectionDifficulty] -- Get the selected difficulty

    if selectionStory and selectionDifficulty then -- Check both selections
        getgenv()[selectionStory] = not getgenv()[selectionStory]
        handlestory(selectionStory, storylevel, difficulty)
    end
end

-- Add dropdown for selecting story
local storyDropdown = LeftGroupBox:AddDropdown('Select Story', {
    Values = {
	'Namek (Stage 1)',
'Namek (Stage 2)',
'Namek (Stage 3)',
'Namek (Stage 4)',
'Namek (Stage 5)',
'Namek (Stage 6)',
'Aot (Stage 1)',
'Aot (Stage 2)',
'Aot (Stage 3)',
'Aot (Stage 4)',
'Aot (Stage 5)',
'Aot (Stage 6)',
'Demon Slayer (Stage 1)',
'Demon Slayer (Stage 2)',
'Demon Slayer (Stage 3)',
'Demon Slayer (Stage 4)',
'Demon Slayer (Stage 5)',
'Demon Slayer (Stage 6)',
'Naruto (Stage 1)',
'Naruto (Stage 2)',
'Naruto (Stage 3)',
'Naruto (Stage 4)',
'Naruto (Stage 5)',
'Naruto (Stage 6)',
'Marine Ford (Stage 1)',
'Marine Ford (Stage 2)',
'Marine Ford (Stage 3)',
'Marine Ford (Stage 4)',
'Marine Ford (Stage 5)',
'Marine Ford (Stage 6)',
'Tokyo Ghoul (Stage 1)',
'Tokyo Ghoul (Stage 2)',
'Tokyo Ghoul (Stage 3)',
'Tokyo Ghoul (Stage 4)',
'Tokyo Ghoul (Stage 5)',
'Tokyo Ghoul (Stage 6)',
'Bleach (Stage 1)',
'Bleach (Stage 2)',
'Bleach (Stage 3)',
'Bleach (Stage 4)',
'Bleach (Stage 5)',
'Bleach (Stage 6)',
'HxH (Stage 1)',
'HxH (Stage 2)',
'HxH (Stage 3)',
'HxH (Stage 4)',
'HxH (Stage 5)',
'HxH (Stage 6)',
'Fairy Tail (Stage 1)',
'Fairy Tail (Stage 2)',
'Fairy Tail (Stage 3)',
'Fairy Tail (Stage 4)',
'Fairy Tail (Stage 5)',
'Fairy Tail (Stage 6)',
'Jujutsu Kaisen (Stage 1)',
'Jujutsu Kaisen (Stage 2)',
'Jujutsu Kaisen (Stage 3)',
'Jujutsu Kaisen (Stage 4)',
'Jujutsu Kaisen (Stage 5)',
'Jujutsu Kaisen (Stage 6)',
'Black Clover (Stage 1)',
'Black Clover (Stage 2)',
'Black Clover (Stage 3)',
'Black Clover (Stage 4)',
'Black Clover (Stage 5)',
'Black Clover (Stage 6)',
'Jojo (Stage 1)',
'Jojo (Stage 2)',
'Jojo (Stage 3)',
'Jojo (Stage 4)',
'Jojo (Stage 5)',
'Jojo (Stage 6)',
'OPM (Stage 1)',
'OPM (Stage 2)',
'OPM (Stage 3)',
'OPM (Stage 4)',
'OPM (Stage 5)',
'OPM (Stage 6)',
'7ds (Stage 1)',
'7ds (Stage 2)',
'7ds (Stage 3)',
'7ds (Stage 4)',
'7ds (Stage 5)',
'7ds (Stage 6)',
'MHA (Stage 1)',
'MHA (Stage 2)',
'MHA (Stage 3)',
'MHA (Stage 4)',
'MHA (Stage 5)',
'MHA (Stage 6)',
'One Piece (Stage 1)',
'One Piece (Stage 2)',
'One Piece (Stage 3)',
'One Piece (Stage 4)',
'One Piece (Stage 5)',
'One Piece (Stage 6)',
'SAO (Stage 1)',
'SAO (Stage 2)',
'SAO (Stage 3)',
'SAO (Stage 4)',
'SAO (Stage 5)',
'SAO (Stage 6)',
'Bersek (Stage 1)',
'Bersek (Stage 2)',
'Bersek (Stage 3)',
'Bersek (Stage 4)',
'Bersek (Stage 5)',
'Bersek (Stage 6)',
'Overlord (Stage 1)',
'Overlord (Stage 2)',
'Overlord (Stage 3)',
'Overlord (Stage 4)',
'Overlord (Stage 5)',
'Overlord (Stage 6)',
    },
    Default = 1,
    Multi = false,
    Text = 'Select Story',
    Callback = function(Value)
        selectionStory = Value
    end
})

-- Add dropdown for selecting difficulty
local difficultyDropdown = LeftGroupBox:AddDropdown('Select Difficulty', {
    Values = {
        'Normal',
        'Hard',
    },
    Default = 1,
    Multi = false,
    Text = 'Select Difficulty',
    Callback = function(Value)
        selectionDifficulty = Value
    end
})

-- Add toggle button for Auto Story
LeftGroupBox:AddToggle('Auto Story', {
    Text = 'Auto Story',
    Default = false,
    Tooltip = 'Auto Story',
    Callback = function()
        autostoryToggle()
    end
})

-- Defina uma função comum para a Callback do Toggle
function autoDGToggle(Value)
    if Value then
        if selectdungeon == 'Cursed Parade' then
            getgenv().dgCP = Value
            dgCP()
        elseif selectdungeon == 'Cursed Womb' then
            getgenv().dgCW = Value
            dgCW()
        end
    end
end

local selectioninfinite = 'Cursed Parade'

local RightGroupBox = Tabs.Main:AddRightGroupbox('Dungeon')

-- Modifique o código original para usar as funções redefinidas
RightGroupBox:AddDropdown('Select Dungeon', {
    Values = { 'Cursed Parade', 'Cursed Womb' },
    Default = 1,
    Multi = false,
    Text = 'Select Dungeon',
    Callback = function(Value)
        selectdungeon = Value
    end
})

RightGroupBox:AddToggle('Auto Dungeon', {
    Text = 'Auto Dungeon',
    Default = false,
    Tooltip = 'Auto Dungeon',
    Callback = function(Value) -- Corrigido: Adicione parênteses e passe o argumento Value
        autoDGToggle(Value)
    end
})

-- Função para controlar os raids
function autoRaidToggle(Value)
    local raidLevel = raidLevels[selectRaid]

    if raidLevel then
        getgenv()[selectRaid] = Value
        handleRaid(selectRaid, raidLevel)
    end
end

local selectioninfinite = 'Entertainment District (Stage 1)'

local RightGroupBox = Tabs.Main:AddRightGroupbox('Raid')

-- Modifique o código original para usar as funções redefinidas
RightGroupBox:AddDropdown('Select Raid', {
    Values = {'Entertainment District (Stage 1)', 'Entertainment District (Stage 2)', 'Entertainment District (Stage 3)', 'Entertainment District (Stage 4)', 'Entertainment District (Stage 5)', 'Uchiha (Stage 1)', 'Uchiha (Stage 2)', 'Uchiha (Stage 3)', 'Uchiha (Stage 4)', 'Uchiha (Stage 5)', 'West City Freeza  (Stage 1)', 'West City Freeza  (Stage 2)', 'West City Freeza  (Stage 3)', 'West City Freeza  (Stage 4)', 'West City Freeza  (Stage 5)', 'Demon Slayer Raid', 'Naruto Raid', 'Aot Raid', 'West City', 'Mha (Stain Stage)', 'Marine Ford (Sengoku Stage)'},
    Default = 1,
    Multi = false,
    Text = 'Select Raid',
    Callback = function(Value)
        selectRaid = Value
    end
})

RightGroupBox:AddToggle('Auto Raid', {
    Text = 'Auto Raid',
    Default = false,
    Tooltip = 'Auto Raid',
    Callback = function(Value)
        autoRaidToggle(Value)
    end
})

-- Função para controlar os raids
function autoLegendToggle()
    local legendlevel = LegendLevels[selectLegend]

    if legendlevel then
        getgenv()[selectLegend] = not getgenv()[selectLegend]
        handleRaid(selectLegend, legendlevel)
    end
end

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Legend')

-- Modifique o código original para usar as funções redefinidas
LeftGroupBox:AddDropdown('Select Legend', {
    Values = {'Clover Legend (Stage 1)', 'Clover Legend (Stage 2)', 'Clover Legend (Stage 3)', 'Bleach Legend (Stage 1)', 'Bleach Legend (Stage 2)', 'Bleach Legend (Stage 3)', 'Bleach Legend (Stage 4)', 'Bleach Legend (Stage 5)', 'Bleach Legend (Stage 6)', 'Jojo Legend (Stage 1)', 'Jojo Legend (Stage 2)', 'Jojo Legend (Stage 3)', '7ds Legend (Stage 1)', '7ds Legend (Stage 2)', '7ds Legend (Stage 3)', 'MHA Legend (Stage 1)', 'MHA Legend (Stage 2)', 'MHA Legend (Stage 3)', 'MHA Legend (Stage 4)', 'MHA Legend (Stage 5)', 'MHA Legend (Stage 6)', 'Sao Legend (Stage 1)', 'Sao Legend (Stage 2)', 'Sao Legend (Stage 3)', 'Overlord Legend (Stage 1)', 'Overlord Legend (Stage 2)', 'Overlord Legend (Stage 3)'},
    Default = 1,
    Multi = false,
    Text = 'Select Legend',
    Callback = function(Value)
        selectLegend = Value
    end
})

LeftGroupBox:AddToggle('Auto Legend', {
    Text = 'Auto Legend',
    Default = false,
    Tooltip = 'Auto Legend',
    Callback = function()
        autoLegendToggle()
    end
})


-- Declare a global variable to store the selected challenge
local selectchallenge = 'Gold'

-- Function to toggle auto challenge based on the selected challenge
function autoChallengeToggle(Value)
    if Value then
        if selectchallenge == 'Gold' then
            getgenv().autochallengegold = Value
            autochallengegold()
        elseif selectchallenge == 'Gems' then
            getgenv().autochallengegems = Value
            autochallengegems()
        elseif selectchallenge == 'Rainbow Fruits' then
            getgenv().autochallengeRainbow = Value
            autochallengeRainbow()
        elseif selectchallenge == 'Random Fruits' then
            getgenv().autochallengeRandom = Value
            autochallengeRandom()
        end
    end
end

-- Your dropdown and toggle setup
local RightGroupBox = Tabs.Main:AddRightGroupbox('Challenge')

RightGroupBox:AddDropdown('Select Dungeon', {
    Values = { 'Gold', 'Gems', 'Rainbow Fruits', 'Random Fruits' },
    Default = 1,
    Multi = false,
    Text = 'Select Challenge',
    Callback = function(Value)
        selectchallenge = Value
    end
})

RightGroupBox:AddToggle('Auto Challenge', {
    Text = 'Auto Challenge',
    Default = false,
    Tooltip = 'Auto Challenge',
    Callback = function(Value)
        autoChallengeToggle(Value)
    end
})

RightGroupBox:AddToggle('Auto Daily Challenge', {
    Text = 'Auto Daily Challenge',
    Default = false,
    Tooltip = 'Auto Daily Challenge',
    Callback = function(Value)
        getgenv().autoDchallenge = Value
        autoDchallenge()
    end
})


-- Crie o objeto RightGroupBox
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Infinite')

local selectioninfinite = 'Namek Infinite'

local function handleinfinite(infinitename, infinitelevel)
    while getgenv()[infinitename] == true do
        local args = {
            [1] = "_lobbytemplategreen1"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
        local args = {
            [1] = "_lobbytemplategreen1",
            [2] = infinitelevel,
            [3] = false,
            [4] = "Hard"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(unpack(args))
        wait(1)
        local args = {
            [1] = "_lobbytemplategreen1"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args))
        print("Mapa selecionado: " .. infinitename)
    end
end

local infinitelevels = {
    ['Namek Infinite'] = 'namek_infinite',
    ['Aot Infinite'] = 'aot_infinite',
    ['Demon Slayer Infinite'] = 'demonslayer_infinite',
    ['Naruto Infinite'] = 'naruto_infinite',
    ['Marine Ford Infinite'] = 'marineford_infinite',
    ['Tokyo Ghoul Infinite'] = 'tokyoghoul_infinite',
    ['Bleach Infinite'] = 'hueco_infinite',
    ['HxH Infinite'] = 'hxhant_infinite',
    ['Fairy Tail Infinite'] = 'magnolia_infinite',
    ['Jujutsu Kaisen Infinite'] = 'jjk_infinite',
    ['Black Clover Infinite'] = 'clover_infinite',
    ['Jojo Infinite'] = 'jojo_infinite',
    ['OPM infinite'] = 'opm_infinite',
    ['7ds Infinite'] = '7ds_infinite',
    ['MHA Infinite'] = 'mha_infinite',
    ['One Piece Infinite'] = 'dressrosa_infinite',
    ['SAO Infinite'] = 'sao_infinite',
    ['Bersek Infinite'] = 'berserk_infinite',
    ['Overlord Infinite'] = 'overlord_infinite',
}

-- Função para controlar os raids
function autoinfiniteToggle()
    local infinitelevel = infinitelevels[selectioninfinite]

    if selectioninfinite then
        getgenv()[selectioninfinite] = not getgenv()[selectioninfinite]
        handleinfinite(selectioninfinite, infinitelevel)
    end
end

-- Modifique o código original para usar as funções redefinidas
local infiniteDropdown = LeftGroupBox:AddDropdown('Select Infinite', {
    Values = {
    'Namek Infinite',
    'Aot Infinite',
    'Demon Slayer Infinite',
    'Naruto Infinite',
    'Marine Ford Infinite',
    'Tokyo Ghoul Infinite',
    'Bleach Infinite',
    'HxH Infinite',
    'Fairy Tail Infinite',
    'Jujutsu Kaisen Infinite',
    'Black Clover Infinite',
    'Jojo Infinite',
    'OPM infinite',
    '7ds Infinite',
    'MHA Infinite',
    'One Piece Infinite',
    'SAO Infinite',
    'Bersek Infinite',
    'Overlord Infinite',
    },
    Default = 1,
    Multi = false,
    Text = 'Select Infinite',
    Callback = function(Value)
        selectioninfinite = Value
    end
})

LeftGroupBox:AddToggle('Auto Infinite', {
    Text = 'Auto Infinite',
    Default = false,
    Tooltip = 'Auto Infinite',
    Callback = function()
        autoinfiniteToggle()
    end
})

local selectOpenPortal = 'Summer Portal'
local selectFriends = 'False'

-- Function to toggle the auto-open feature for different portals
function autoOpenToggle(Value)
    if Value then
        if selectOpenPortal == 'Summer Portal' then
            getgenv().autoOpenSummerPortal = Value
            autoOpenSummerPortal()
        elseif selectOpenPortal == 'Dressrosa Portal' then
            getgenv().autoOpenDressrosaPortal = Value
            autoOpenDressrosaPortal()
        elseif selectOpenPortal == '7ds Portal' then
            getgenv().autoOpen7dsPortal = Value
            autoOpen7dsPortal()
        elseif selectOpenPortal == 'Eclipse Portal' then
            getgenv().autoOpenEclipsePortal = Value
            autoOpenEclipsePortal()
        elseif selectOpenPortal == 'Fate Portal' then
            getgenv().autoOpenFatePortal = Value
            autoOpenFatePortal()
        end
    end
end

-- Your dropdown and toggle setup
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Auto Open Portal')

LeftGroupBox:AddDropdown('Select Portal', {
    Values = { 'Summer Portal', 'Dressrosa Portal', '7ds Portal', 'Eclipse Portal', 'Fate Portal' },
    Default = 1,
    Multi = false,
    Text = 'Select Portal',
    Callback = function(Value)
        selectOpenPortal = Value  -- Update selectOpenPortal when the dropdown changes
    end
})

LeftGroupBox:AddDropdown('Only Friends', {
    Values = { 'False', 'True' },
    Default = 1,
    Multi = false,
    Text = 'Only Friends',
    Callback = function(Value)
        selectFriends = Value  -- Update selectFriends when the dropdown changes
    end
})

LeftGroupBox:AddToggle('Auto Open Portal', {
    Text = 'Auto Open Portal',
    Default = false,
    Tooltip = 'Auto Open Portal',
    Callback = function(Value)
        autoOpenToggle(Value)
    end
})

function autoPickportalToggle(Value)
    if Value then
        if selectPickPortal == 'Summer Portal' then
            getgenv().pickportalsummer = Value
            pickportalsummer()
        elseif selectPickPortal == 'Dressrosa Portal' then
            getgenv().pickportaldressrosa = Value
            pickportaldressrosa()
        elseif selectPickPortal == '7ds Portal' then
            getgenv().pickportalsds = Value
            pickportalsds()
        elseif selectPickPortal == 'Eclipse Portal' then
            getgenv().pickportaleclipse = Value
            pickportaleclipse()
        elseif selectPickPortal == 'Fate Portal' then
            getgenv().pickportalfate = Value
            pickportalfate()
        end
    end
end

-- Your dropdown and toggle setup
local RightGroupBox = Tabs.Main:AddRightGroupbox('Auto Pick Portal')

RightGroupBox:AddDropdown('Select Dungeon', {
    Values = { 'Summer Portal', 'Dressrosa Portal', '7ds Portal', 'Eclipse Portal', 'Fate Portal' },
    Default = 1,
    Multi = false,
    Text = 'Select Portal',
    Callback = function(Value)
        selectPickPortal = Value  -- Update selectChallenge when the dropdown changes
    end
})

RightGroupBox:AddToggle('Auto Pick Portal', {
    Text = 'Auto Pick Portal',
    Default = false,
    Tooltip = 'Auto Pick Portal',
    Callback = function(Value)
        autoPickportalToggle(Value)
    end
})

local Tabs = {
    -- Cria uma nova aba com o título "Main"
    Main = Window:AddTab('Shop'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Shop')

LeftGroupBox:AddToggle('Auto Summon 1', {
    Text = 'Auto Summon 1',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Summon 1', -- Information shown when you hover over the toggle

    Callback = function(Value)
        getgenv().autoSummon1 = Value
        autoSummon1()
    end
})

LeftGroupBox:AddToggle('Auto Summon 10', {
    Text = 'Auto Summon 10',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Summon 10', -- Information shown when you hover over the toggle

    Callback = function(Value)
    getgenv().autoSummon = Value
    autoSummon()
    end
})

LeftGroupBox:AddToggle('Auto Summon Ticket', {
    Text = 'Auto Summon Ticket',
    Default = false, -- Default value (true / false)
    Tooltip = 'Auto Summon Ticket', -- Information shown when you hover over the toggle

    Callback = function(Value)
    getgenv().autosummonTicket = Value
    autosummonTicket()
    end
})


local FrameTimer = tick()
local FrameCounter = 0;
local FPS = 60;

local WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter += 1;

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter;
        FrameTimer = tick();
        FrameCounter = 0;
    end;

    Library:SetWatermark(('Tempest Hub | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ));
end);


local Tabs = {
['UI Settings'] = Window:AddTab('UI Settings'),
}

Library:OnUnload(function()
    WatermarkConnection:Disconnect()

    print('Unloaded!')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

-- I set NoUI so it does not show up in the keybinds menu
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder('Tempest Hub')
SaveManager:SetFolder('Tempest Hub/Anime Adventures')

SaveManager:BuildConfigSection(Tabs['UI Settings'])

ThemeManager:ApplyToTab(Tabs['UI Settings'])

SaveManager:LoadAutoloadConfig()


for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
wait(1)
warn('[TEMPEST HUB] Loaded')
